# Experiment 1: Analysis of Tree Size Impact on MCTS Performance

## Introduction
This experiment investigates the relationship between tree size and performance in Monte Carlo Tree Search (MCTS) for Ultimate Tic-Tac-Toe. By pitting two MCTS implementations against each other with varying computational resources, we aim to understand how increasing tree size affects win rates and computational efficiency.

## Methodology
- Player 1: Fixed at 100 nodes/tree
- Player 2: Tested with 100, 250, 500, 750, and 1000 nodes
- 100 games played for each configuration
- Recorded wins for both players and execution time

## Results
### Performance Metrics
- Tree size 100: P1 (47 wins) vs P2 (53 wins)
- Tree size 250: P1 (27 wins) vs P2 (73 wins)
- Tree size 500: P1 (18 wins) vs P2 (82 wins)
- Tree size 750: P1 (8 wins) vs P2 (92 wins)
- Tree size 1000: P1 (7 wins) vs P2 (93 wins)

### Computational Cost
- 100 nodes: 198.24 seconds
- 250 nodes: 327.27 seconds
- 500 nodes: 565.49 seconds
- 750 nodes: 765.33 seconds
- 1000 nodes: 967.72 seconds

## Analysis

### Resource Impact
The results demonstrate a clear correlation between increased tree size and improved performance. At equal resources (100 nodes), the game is relatively balanced with a slight advantage to Player 2 (53%). However, increasing Player 2's tree size leads to significant performance improvements, with win rates rising dramatically up to 93% at 1000 nodes.

### Performance Patterns
1. Initial Jump (100 → 250 nodes):
   - Largest single improvement in win rate (+20%)
   - Suggests critical threshold for effective game tree exploration

2. Continued Improvement (250 → 500 nodes):
   - Substantial but smaller gain (+9%)
   - Indicates sustained benefits from additional resources

3. Diminishing Returns:
   - Minimal improvement from 750 to 1000 nodes (+1%)
   - Suggests approaching optimal tree size for this game configuration

### Computational Efficiency
The relationship between computational cost and performance shows:
- Linear increase in execution time with tree size
- Non-linear improvement in win rate
- Optimal efficiency point appears around 750 nodes, where:
  - Win rate is near maximum (92%)
  - Additional resources yield minimal improvements
  - Time cost is still manageable

## Conclusion
The experiment reveals that while increasing tree size consistently improves MCTS performance, there is a clear point of diminishing returns. The optimal balance between performance and computational cost appears to be around 750 nodes, where the bot achieves a 92% win rate against the 100-node opponent. Further increases in tree size offer minimal performance benefits while continuing to increase computational cost linearly.

These findings suggest that practitioners implementing MCTS for similar game scenarios should consider 750 nodes as a practical upper limit for tree size, as it offers near-optimal performance without excessive computational overhead.
